-- Single-Row Subqueries:
-- 
-- 1-Write a query to find the maximum duration among the tracks. 
-- Your query should include TrackId, Name, Milliseconds.

SELECT TrackId, Name, Milliseconds
FROM tracks
WHERE Milliseconds = (
	SELECT MAX(Milliseconds)
	FROM tracks)


-- --2-Write a query to find the minimum duration among the tracks. 
-- Your query should include TrackId, Name, Milliseconds.
-- 
SELECT TrackId, Name, Milliseconds
FROM tracks
WHERE Milliseconds = (
	SELECT MIN(Milliseconds)
	FROM tracks);

--3-Write a query to find the tracks whose bytes are higher than the average of the bytes of all tracks. 
-- Your query should include TrackId, Name, Bytes, general average and should be ordered by Bytes from highest to lowest. 
-- General average is the average of all tracks. General average should repeat in every row. 
-- (Hint: You need to use two subqueries)

SELECT  TrackId, Name, Bytes, (SELECT ROUND(AVG(Bytes), 2) FROM tracks) AS Avg_Bytes
FROM tracks
WHERE Bytes > (
	SELECT AVG(Bytes)
	FROM tracks
)
ORDER BY Bytes DESC;





--Multiple-Row Subqueries:

--1-Write a query that returns the customers whose sales representatives are Jane Peacock and Margaret Park. 
----Your query should include CustomerID, First Name and Last Name of the customers.

SELECT CustomerID, FirstName, LastName
FROM customers
WHERE SupportRepId IN (
	SELECT EmployeeId 
	FROM employees
	WHERE FirstName IN ('Jane','Margaret') AND LastName IN ('Peacock','Mark')
)





--Multiple-Row Subqueries:

--2-Rewrite the subquery Nr.1 using the JOIN.
----'Write a query that returns the customers whose sales representatives are Jane Peacock and Margaret Park. 
----Your query should include CustomerID, First Name and Last Name of the customers.'



SELECT c.CustomerID, c.FirstName, c.LastName
FROM customers c
JOIN employees e ON c.SupportRepId = e.EmployeeId
WHERE e.FirstName IN ('Jane','Margaret') AND e.LastName IN ('Peacock','Mark')

______________________________________




-- DDL (CREATE, ALTER, DELETE) and DML (SELECT, INSERT, UPDATE, DELETE) Statements
-- 
--1- Create a table inside the chinook database. 
-----This table tracks the employees’ courses inside the organization. 
-----Your table should have the followings features:
--               Name of the table: courses
--                Columns:
--                     CourseId (Primary Key)
--                     CourseName (Cannot be null)
--                     EmployeeId (Foreign Key - Refers to EmployeeId of employees table ) 
--                     CoursePrice-- 

DROP TABLE  IF EXISTS courses;

CREATE TABLE courses (
	CourseId INT PRIMARY KEY,
    CourseName TEXT NOT NULL,
    EmployeeId INT,
    CoursePrice REAL,
	FOREIGN KEY (EmployeeId)
    REFERENCES employees (EmployeeId)
);

--2 Insert at least 10 rows into the courses table. 
----Your EmployeeId should contain the values of the EmployeeId column on the employees table. 
----You’re free to choose any values for other columns (CourseId, CourseName, CoursePrice)

INSERT INTO courses (EmployeeId, CourseId, CourseName)
VALUES (1,001, 'Basics'),
             (2,002, 'Comp Thniking'),
             (3,003, 'HTML'),			 
             (4,004, 'CSS'),
             (5,005, 'Python'),
             (6,006, 'SQL'),
             (7,007, 'React'),
             (8,008, 'Jira'),
	     (2,009, 'MangoDB'),
	     (6,010, 'Jira');
			 
--3-Delete the last row of your courses table.

DELETE 
FROM courses
WHERE CourseId = 010;

--4-Add a new column to your courses table named StartDate. The new column cannot be null.

ALTER TABLE courses
ADD StartDate TEXT;


--5-Delete the CoursePrice column.

--DOES NOT WORK IN SQLITE
--ALTER TABLE courses
--DROP COLUMN CoursePrice;

--6-Delete the courses table.
DROP TABLE courses;

